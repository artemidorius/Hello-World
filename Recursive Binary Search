import java.util.*;
public class recubi{
    public boolean BinarySearch( int a[], int ns, int low, int high){
        int mid = (low + high)/ 2;
        if ( low > high){
            return false;
        }
        else if ( a[mid] > ns){
            return BinarySearch( a, ns, low, mid - 1);
        }
        else if ( a[mid] < ns){
            return BinarySearch( a, ns, mid + 1, high);
        }
        else{ // element found
            return true;
    }
    
}
public static void main(String args []){
    Scanner sc = new Scanner(System.in);
    System.out.println("Enter size of array ");
    int n = sc.nextInt();
    int b[] = new int[n]; // zero INDEXED but SIZE is still normal
    System.out.println("Enter array");
    for ( int i = 0; i < n; i++){
        b[i] = sc.nextInt();
    }
    System.out.println("Enter element to be found ");
    int s = sc.nextInt();
    recubi ob = new recubi();
    
    for ( int i = 0; i < (n-1); i ++){ // not checking last element as there is nothing to compare to as we reached the end of the array
        int min = i; // in case it is the smallest element
        for ( int j = i; j < n; j++){
            if (b[min] > b[j]){ // if current element being checked is smaller than the minimum in subarray so far 
                min = j;
            }
        }
        if ( min != i ){
            // Swap a[i] with a[min]
            int temp = b[i];
            b[i] = b[min];
            b[min] = temp;
        }
    } // Efficient Selection sort ends
    // Printing array
    System.out.println("Sorted array");
    for ( int i = 0; i < n; i++){
        System.out.println(b[i]);
    }
    boolean f= ob.BinarySearch(b, s, 0, (n-1));
    if(f){
        System.out.println("Search Successful");
    }
    else{
        System.out.println("Search Unsuccessful");
    }
    
}
}
